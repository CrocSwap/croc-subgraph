"""
A Swap entity represents an atomic swap of a base token for a quote token
made on either CrocSwap or Uniswap V3.
"""
type Swap @entity(immutable: true) {
  id: Bytes!
  transactionHash: Bytes!
  callIndex: Int!
  user: Bytes!
  block: BigInt!
  transactionIndex: BigInt!
  time: BigInt!
  pool: Pool!
  isBuy: Boolean!
  inBaseQty: Boolean!
  qty: BigInt!
  limitPrice: BigDecimal
  minOut: BigInt
  baseFlow: BigInt!
  quoteFlow: BigInt!
  price: BigDecimal
  callSource: String!
  dex: String!
}

"""
A LiquidityChange entity represents a single modification to a single
liquidity position made on CrocSwap. LiquidityChanges are categorized
according to their changeType, which can be equal to mint, burn, harvest,
claim, or recover.
"""
type LiquidityChange @entity(immutable: true) {
  id: Bytes!
  transactionHash: Bytes!
  callIndex: Int!
  pool: Pool!
  user: Bytes!
  block: BigInt!
  time: BigInt!
  positionType: String!
  changeType: String!
  bidTick: Int
  askTick: Int
  isBid: Boolean!
  liq: BigInt
  baseFlow: BigInt
  quoteFlow: BigInt
  callSource: String!
  pivotTime: BigInt
}

"""
A Pool represents a single liquidity pool on CrocSwap, which is uniquely
specified by a base token, a quote token, and a poolIdx. The ID of the Pool
is the same as the poolHash used internally in CrocSwap contracts.
"""
type Pool @entity(immutable: true) {
  id: Bytes!
  blockCreate: BigInt!
  timeCreate: BigInt!
  base: Bytes!
  quote: Bytes!
  poolIdx: BigInt!
  template: PoolTemplate
  swaps: [Swap!]! @derivedFrom(field: "pool")
  liquidityChanges: [LiquidityChange!]! @derivedFrom(field: "pool")
}

"""
PoolTemplate represents a pool type pattern to create new pools
"""
type PoolTemplate @entity(immutable: false) {
  id: Bytes!
  blockInit: BigInt!
  timeInit: BigInt!
  blockRevise: BigInt!
  timeRevise: BigInt!
  poolIdx: BigInt!
  feeRate: Int!
  enabled: Boolean!
  pools: [Pool!]! @derivedFrom(field: "template")
}

"""
A KnockoutCross is an exact copy of the data emitted in a KnockoutCross event
emitted by the CrocSwap DEX. There is an exact 1:1 correspondence between
emitted events and KnockoutCross entities created by the subgraph.
"""
type KnockoutCross @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  time: BigInt!
  transactionHash: Bytes!
  pool: Pool!
  tick: Int!
  isBid: Boolean!
  pivotTime: BigInt!
  feeMileage: BigInt!
}

"""
A UserBalance entity represents the first time that a user might have
conceivably "received" a given token from the CrocSwap DEX, such as via
the output of a swap or via the burning of a liquidity position. These
entities collectively represent the universe of tokens for which users
might have nonzero internal DEX balances.
"""
type UserBalance @entity(immutable: true) {
  id: Bytes!
  transactionHash: Bytes!
  block: BigInt!
  time: BigInt!
  user: Bytes!
  token: Bytes!
}

"""
LatestIndex entities are used to help perform bookkeeping related to the
generation of unique event IDs in the case where multiple identical entities
would otherwise be created within the same transaction.
"""
type LatestIndex @entity {
  id: Bytes!
  callIndex: Int!
}

"""
A FeeChange represents an update to the swap fee setting on a given CrocSwap
liquidity pool.
"""
type FeeChange @entity(immutable: true) {
  id: Bytes!
  transactionHash: Bytes!
  callIndex: Int!
  block: BigInt!
  time: BigInt!
  pool: Pool!
  feeRate: Int!
}

"""
Reflects sequences of changes necessary to accurately calculate aggregate statistics
such as volume, TVL and fees collected
"""
type AggEvent @entity(immutable: true) {
  id: Bytes!
  transactionHash: Bytes!
  eventIndex: Int!
  pool: Pool!
  block: BigInt!
  time: BigInt!
  baseFlow: BigInt
  quoteFlow: BigInt
  isSwap:  Boolean!
  isLiq: Boolean!
  isFeeChange: Boolean!
  swapPrice: BigDecimal
  inBaseQty: Boolean!
  isTickSkewed: Boolean!
  flowsAtMarket: Boolean!
  bidTick: Int
  askTick: Int
  feeRate: Int
}
